{
  "info": {
    "name": "E-commerce API v2.0",
    "description": "Complete API collection for the e-commerce backend with local and production environments",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{url}}",
      "type": "string",
      "description": "Base URL - will be set by environment"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string",
      "description": "JWT token for authenticated requests"
    },
    {
      "key": "adminToken",
      "value": "",
      "type": "string",
      "description": "Admin JWT token"
    },
    {
      "key": "customerToken",
      "value": "",
      "type": "string",
      "description": "Customer JWT token"
    },
    {
      "key": "productId",
      "value": "",
      "type": "string",
      "description": "Product ID for testing delete operations"
    },
    {
      "key": "brandId",
      "value": "",
      "type": "string",
      "description": "Brand ID for testing brand operations"
    },
    {
      "key": "orderId",
      "value": "",
      "type": "string",
      "description": "Order ID for testing order operations"
    },
    {
      "key": "adminId",
      "value": "507f1f77bcf86cd799439013",
      "type": "string",
      "description": "Admin ID for testing order operations"
    }
  ],
  "item": [
    {
      "name": "üè• Health & Status",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success field', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "});",
                  "",
                  "pm.test('Response has timestamp', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "});",
                  "",
                  "console.log('‚úÖ Server is healthy and running');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Check if the server is running and healthy"
          }
        }
      ],
      "description": "Health check and server status endpoints"
    },
    {
      "name": "üîê Authentication",
      "item": [
        {
          "name": "Register Admin User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('token');",
                  "    pm.expect(jsonData.data.token).to.be.a('string');",
                  "});",
                  "",
                  "pm.test('User role is admin', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.user.role).to.equal('admin');",
                  "});",
                  "",
                  "// Save admin token",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('adminToken', response.data.token);",
                  "    pm.collectionVariables.set('authToken', response.data.token);",
                  "    console.log('‚úÖ Admin user registered and token saved');",
                  "} else {",
                  "    console.log('‚ùå Admin registration failed');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fullName\": \"Admin User\",\n  \"email\": \"admin@example.com\",\n  \"password\": \"adminpass123\",\n  \"role\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new admin user"
          }
        },
        {
          "name": "Register Customer User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('User role is customer', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.user.role).to.equal('customer');",
                  "});",
                  "",
                  "// Save customer token",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('customerToken', response.data.token);",
                  "    console.log('‚úÖ Customer user registered and token saved');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fullName\": \"John Customer\",\n  \"email\": \"customer@example.com\",\n  \"password\": \"password123\",\n  \"role\": \"customer\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new customer user"
          }
        },
        {
          "name": "Login Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Login successful', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.equal('Login successful');",
                  "});",
                  "",
                  "// Save admin token",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('adminToken', response.data.token);",
                  "    pm.collectionVariables.set('authToken', response.data.token);",
                  "    console.log('‚úÖ Admin login successful');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"adminpass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with admin credentials"
          }
        },
        {
          "name": "Login Customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Save customer token",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('customerToken', response.data.token);",
                  "    console.log('‚úÖ Customer login successful');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"customer@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with customer credentials"
          }
        }
      ],
      "description": "User authentication endpoints"
    },
    {
      "name": "üõí Order Management",
      "item": [
        {
          "name": "Create Order (Customer Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Order created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.message).to.equal('Order created successfully');",
                  "});",
                  "",
                  "pm.test('Order has required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const order = jsonData.data.order;",
                  "    pm.expect(order).to.have.property('_id');",
                  "    pm.expect(order).to.have.property('orderNumber');",
                  "    pm.expect(order).to.have.property('customerId');",
                  "    pm.expect(order).to.have.property('items');",
                  "    pm.expect(order).to.have.property('totalAmount');",
                  "    pm.expect(order).to.have.property('shippingStatus');",
                  "});",
                  "",
                  "pm.test('Order has correct initial status', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.order.shippingStatus).to.equal('pending');",
                  "});",
                  "",
                  "// Save order ID for other tests",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('orderId', response.data.order._id);",
                  "    console.log('‚úÖ Order created successfully');",
                  "    console.log('üìã Order Number:', response.data.order.orderNumber);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{customerToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [\n    {\n      \"productName\": \"Test Product\",\n      \"productId\": \"{{productId}}\",\n      \"ownerId\": \"{{adminId}}\",\n      \"quantity\": 2,\n      \"totalCost\": 51.98\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": ["{{baseUrl}}"],
              "path": ["orders"]
            },
            "description": "Create a new order with real product - requires customer authentication. Make sure to set productId and adminId variables from previous requests."
          }
        },
        {
          "name": "Get All Orders (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Orders retrieved successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.message).to.equal('Orders retrieved successfully');",
                  "});",
                  "",
                  "pm.test('Response has orders array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('orders');",
                  "    pm.expect(jsonData.data.orders).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response has pagination', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('pagination');",
                  "    pm.expect(jsonData.data.pagination).to.have.property('currentPage');",
                  "    pm.expect(jsonData.data.pagination).to.have.property('totalPages');",
                  "    pm.expect(jsonData.data.pagination).to.have.property('totalOrders');",
                  "});",
                  "",
                  "console.log('‚úÖ Orders retrieved successfully');",
                  "console.log('üìä Total Orders:', pm.response.json().data.pagination.totalOrders);"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/orders?page=1&limit=10&sortBy=createdAt&sortOrder=desc",
              "host": ["{{baseUrl}}"],
              "path": ["orders"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of orders per page"
                },
                {
                  "key": "status",
                  "value": "pending",
                  "description": "Filter by shipping status",
                  "disabled": true
                },
                {
                  "key": "sortBy",
                  "value": "createdAt",
                  "description": "Sort field"
                },
                {
                  "key": "sortOrder",
                  "value": "desc",
                  "description": "Sort order (asc/desc)"
                }
              ]
            },
            "description": "Get all orders with pagination and filtering - requires admin authentication"
          }
        },
        {
          "name": "Get Order by ID (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Order retrieved successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.message).to.equal('Order retrieved successfully');",
                  "});",
                  "",
                  "pm.test('Order has complete information', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const order = jsonData.data.order;",
                  "    pm.expect(order).to.have.property('_id');",
                  "    pm.expect(order).to.have.property('orderNumber');",
                  "    pm.expect(order).to.have.property('customerId');",
                  "    pm.expect(order).to.have.property('items');",
                  "    pm.expect(order).to.have.property('totalAmount');",
                  "    pm.expect(order).to.have.property('shippingStatus');",
                  "});",
                  "",
                  "console.log('‚úÖ Order details retrieved successfully');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}"]
            },
            "description": "Get specific order by ID with populated customer and product details - requires admin authentication"
          }
        },
        {
          "name": "Update Order Status to Shipped (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Order status updated successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.message).to.equal('Order status updated successfully');",
                  "});",
                  "",
                  "pm.test('Order has updated status', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.order.shippingStatus).to.equal('shipped');",
                  "});",
                  "",
                  "console.log('‚úÖ Order status updated to shipped');"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shippingStatus\": \"shipped\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}", "status"]
            },
            "description": "Update order shipping status to shipped - requires admin authentication"
          }
        },
        {
          "name": "Update Order Status to Delivered (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Order status updated to delivered', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.order.shippingStatus).to.equal('delivered');",
                  "});",
                  "",
                  "console.log('‚úÖ Order status updated to delivered');"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shippingStatus\": \"delivered\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}", "status"]
            },
            "description": "Update order status to delivered - final status in the order lifecycle"
          }
        }
      ],
      "description": "Order management endpoints - customers can create orders, admins can view and manage all orders"
    },
    {
      "name": "üõçÔ∏è Products",
      "item": [
        {
          "name": "Get All Products (Public)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has products array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('products');",
                  "    pm.expect(jsonData.data.products).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response has count', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('count');",
                  "});",
                  "",
                  "console.log('‚úÖ Products retrieved successfully');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            },
            "description": "Get all products - no authentication required"
          }
        },
        {
          "name": "Create Product (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Product created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.equal('Product created successfully');",
                  "});",
                  "",
                  "pm.test('Product has required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const product = jsonData.data.product;",
                  "    pm.expect(product).to.have.property('_id');",
                  "    pm.expect(product).to.have.property('productName');",
                  "    pm.expect(product).to.have.property('cost');",
                  "    pm.expect(product).to.have.property('ownerId');",
                  "});",
                  "",
                  "// Save product ID for delete test",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('productId', response.data.product._id);",
                  "    console.log('‚úÖ Product created and ID saved:', response.data.product._id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productName\": \"Premium Laptop\",\n  \"cost\": 1299.99,\n  \"productImages\": [\n    \"https://example.com/laptop1.jpg\",\n    \"https://example.com/laptop2.jpg\"\n  ],\n  \"description\": \"High-performance laptop with 16GB RAM, 512GB SSD, and Intel i7 processor. Perfect for professional work and gaming.\",\n  \"stockStatus\": \"In Stock\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            },
            "description": "Create a new product - requires admin authentication"
          }
        },
        {
          "name": "Create Product Without Images",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Product images default to empty array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.product.productImages).to.be.an('array');",
                  "    pm.expect(jsonData.data.product.productImages).to.have.lengthOf(0);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productName\": \"Wireless Mouse\",\n  \"cost\": 29.99,\n  \"description\": \"Ergonomic wireless mouse with long battery life and precision tracking.\",\n  \"stockStatus\": \"Available\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            },
            "description": "Create product without images array"
          }
        },
        {
          "name": "Delete Product (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Product deleted successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.equal('Product deleted successfully');",
                  "});",
                  "",
                  "console.log('‚úÖ Product deleted successfully');"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{productId}}"]
            },
            "description": "Delete a product by ID - requires admin authentication"
          }
        }
      ],
      "description": "Product management endpoints"
    },
    {
      "name": "üö´ Error Testing",
      "item": [
        {
          "name": "Invalid Registration Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response indicates validation failed', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.equal('Validation failed');",
                  "});",
                  "",
                  "pm.test('Response has errors array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('errors');",
                  "    pm.expect(jsonData.errors).to.be.an('array');",
                  "});",
                  "",
                  "console.log('‚úÖ Validation errors handled correctly');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fullName\": \"A\",\n  \"email\": \"invalid-email\",\n  \"password\": \"123\",\n  \"role\": \"invalid-role\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Test validation with invalid registration data"
          }
        },
        {
          "name": "Unauthorized Product Creation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response indicates no token provided', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.equal('Access denied. No token provided.');",
                  "});",
                  "",
                  "console.log('‚úÖ Unauthorized access properly blocked');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productName\": \"Unauthorized Product\",\n  \"cost\": 50.00,\n  \"description\": \"This should fail without authentication\",\n  \"stockStatus\": \"Available\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            },
            "description": "Test product creation without authentication"
          }
        },
        {
          "name": "Customer Tries to Create Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 403', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Response indicates insufficient permissions', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.equal('Access denied. Insufficient permissions.');",
                  "});",
                  "",
                  "console.log('‚úÖ Role-based access control working correctly');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{customerToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productName\": \"Customer Product\",\n  \"cost\": 25.00,\n  \"description\": \"This should fail - customers can't create products\",\n  \"stockStatus\": \"Available\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            },
            "description": "Test that customers cannot create products"
          }
        },
        {
          "name": "Invalid Product Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response indicates validation failed', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.equal('Validation failed');",
                  "});",
                  "",
                  "console.log('‚úÖ Product validation working correctly');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productName\": \"A\",\n  \"cost\": -10,\n  \"productImages\": [\"invalid-url\"],\n  \"description\": \"Short\",\n  \"stockStatus\": \"\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            },
            "description": "Test product creation with invalid data"
          }
        },
        {
          "name": "Delete Non-existent Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response indicates product not found', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.equal('Product not found');",
                  "});",
                  "",
                  "console.log('‚úÖ Non-existent product handling correct');"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/products/507f1f77bcf86cd799439011",
              "host": ["{{baseUrl}}"],
              "path": ["products", "507f1f77bcf86cd799439011"]
            },
            "description": "Test deleting a product that doesn't exist"
          }
        }
      ],
      "description": "Error handling and validation testing"
    },
    {
      "name": "üîÑ Complete Workflow",
      "item": [
        {
          "name": "Full API Workflow Test",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "console.log('üöÄ Starting complete API workflow test...');"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This is a placeholder for a complete workflow test",
                  "// In practice, you would run the requests in sequence",
                  "console.log('‚úÖ Complete workflow test placeholder');",
                  "console.log('To run full workflow:');",
                  "console.log('1. Run Health Check');",
                  "console.log('2. Register Admin');",
                  "console.log('3. Create Product');",
                  "console.log('4. Get All Products');",
                  "console.log('5. Delete Product');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Placeholder for complete workflow testing"
          }
        }
      ],
      "description": "Complete API workflow testing"
    },
    {
      "name": "üè∑Ô∏è Brand Management",
      "item": [
        {
          "name": "Get All Brands",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has brands array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});",
                  "",
                  "console.log('‚úÖ Brands retrieved successfully');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/brands",
              "host": ["{{baseUrl}}"],
              "path": ["brands"]
            },
            "description": "Get all brands - no authentication required"
          }
        },
        {
          "name": "Create Brand (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Brand created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('_id');",
                  "    pm.expect(jsonData.data.brandName).to.equal('Nike');",
                  "});",
                  "",
                  "// Save brand ID for other tests",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('brandId', response.data._id);",
                  "    console.log('‚úÖ Brand created and ID saved:', response.data._id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"brandName\": \"Nike\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/brands",
              "host": ["{{baseUrl}}"],
              "path": ["brands"]
            },
            "description": "Create a new brand - requires admin authentication"
          }
        },
        {
          "name": "Update Brand (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Brand updated successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.brandName).to.equal('Nike Updated');",
                  "});",
                  "",
                  "console.log('‚úÖ Brand updated successfully');"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"brandName\": \"Nike Updated\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/brands/{{brandId}}",
              "host": ["{{baseUrl}}"],
              "path": ["brands", "{{brandId}}"]
            },
            "description": "Update a brand - requires admin authentication"
          }
        },
        {
          "name": "Get Products by Brand (Paginated)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('products');",
                  "    pm.expect(jsonData.data).to.have.property('pagination');",
                  "    pm.expect(jsonData.data.pagination).to.have.property('currentPage');",
                  "    pm.expect(jsonData.data.pagination).to.have.property('totalPages');",
                  "});",
                  "",
                  "console.log('‚úÖ Paginated products by brand retrieved successfully');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/{{brandId}}/1/10",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{brandId}}", "1", "10"]
            },
            "description": "Get paginated products by brand - no authentication required"
          }
        },
        {
          "name": "Create Product with Brand",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Product has brand information', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.product).to.have.property('brand');",
                  "    pm.expect(jsonData.data.product.brand).to.have.property('brandName');",
                  "});",
                  "",
                  "console.log('‚úÖ Product with brand created successfully');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productName\": \"Nike Air Max\",\n  \"brand\": \"{{brandId}}\",\n  \"cost\": 149.99,\n  \"productImages\": [\"https://example.com/nike-air-max.jpg\"],\n  \"description\": \"Premium Nike Air Max sneakers with advanced cushioning technology\",\n  \"stockStatus\": \"In Stock\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            },
            "description": "Create a product with brand reference - requires admin authentication"
          }
        },
        {
          "name": "Delete Brand (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Brand deleted successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "console.log('‚úÖ Brand deleted successfully');"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/brands/{{brandId}}",
              "host": ["{{baseUrl}}"],
              "path": ["brands", "{{brandId}}"]
            },
            "description": "Delete a brand - requires admin authentication"
          }
        }
      ],
      "description": "Brand management endpoints with CRUD operations and product associations"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('üåê Environment:', pm.environment.name || 'No environment selected');",
          "console.log('üîó Base URL:', pm.collectionVariables.get('baseUrl'));"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "// Log response for debugging",
          "if (pm.response.code >= 400) {",
          "    console.log('‚ùå Error Response:', pm.response.json());",
          "}"
        ]
      }
    }
  ]
}
