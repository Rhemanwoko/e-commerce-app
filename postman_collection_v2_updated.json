{
  "info": {
    "name": "E-commerce API v2.1 - Complete",
    "description": "Complete API collection for the e-commerce backend with all features: Authentication, Products, Brands, Orders, Profile, Order History, and Socket Notifications",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.1.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{url}}",
      "type": "string",
      "description": "Base URL - will be set by environment"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string",
      "description": "JWT token for authenticated requests"
    },
    {
      "key": "adminToken",
      "value": "",
      "type": "string",
      "description": "Admin JWT token"
    },
    {
      "key": "customerToken",
      "value": "",
      "type": "string",
      "description": "Customer JWT token"
    },
    {
      "key": "productId",
      "value": "",
      "type": "string",
      "description": "Product ID for testing operations"
    },
    {
      "key": "brandId",
      "value": "",
      "type": "string",
      "description": "Brand ID for testing operations"
    },
    {
      "key": "orderId",
      "value": "",
      "type": "string",
      "description": "Order ID for testing operations"
    },
    {
      "key": "adminId",
      "value": "507f1f77bcf86cd799439013",
      "type": "string",
      "description": "Admin ID for testing operations"
    },
    {
      "key": "customerId",
      "value": "",
      "type": "string",
      "description": "Customer ID for testing operations"
    }
  ],
  "item": [
    {
      "name": "üè• Health & Status",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success field', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "});",
                  "",
                  "pm.test('Response has system status', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('ready');",
                  "    pm.expect(jsonData).to.have.property('uptime');",
                  "});",
                  "",
                  "console.log('‚úÖ Server is healthy and running');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Enhanced health check with system status, uptime, and component health"
          }
        }
      ],
      "description": "Health check and server status endpoints"
    },
    {
      "name": "üîê Authentication",
      "item": [
        {
          "name": "Register Admin User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('token');",
                  "    pm.expect(jsonData.data.token).to.be.a('string');",
                  "});",
                  "",
                  "pm.test('User role is admin', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.user.role).to.equal('admin');",
                  "});",
                  "",
                  "// Save admin token and ID",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('adminToken', response.data.token);",
                  "    pm.collectionVariables.set('authToken', response.data.token);",
                  "    pm.collectionVariables.set('adminId', response.data.user._id);",
                  "    console.log('‚úÖ Admin user registered and token saved');",
                  "} else {",
                  "    console.log('‚ùå Admin registration failed');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fullName\": \"Admin User\",\n  \"email\": \"admin@example.com\",\n  \"password\": \"adminpass123\",\n  \"role\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new admin user with enhanced validation and security"
          }
        },
        {
          "name": "Register Customer User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('User role is customer', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.user.role).to.equal('customer');",
                  "});",
                  "",
                  "// Save customer token and ID",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('customerToken', response.data.token);",
                  "    pm.collectionVariables.set('customerId', response.data.user._id);",
                  "    console.log('‚úÖ Customer user registered and token saved');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fullName\": \"John Customer\",\n  \"email\": \"customer@example.com\",\n  \"password\": \"password123\",\n  \"role\": \"customer\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new customer user"
          }
        },
        {
          "name": "Login Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Login successful', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.equal('Login successful');",
                  "});",
                  "",
                  "// Save admin token",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('adminToken', response.data.token);",
                  "    pm.collectionVariables.set('authToken', response.data.token);",
                  "    console.log('‚úÖ Admin login successful');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"adminpass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with admin credentials"
          }
        },
        {
          "name": "Login Customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Save customer token",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('customerToken', response.data.token);",
                  "    console.log('‚úÖ Customer login successful');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"customer@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with customer credentials"
          }
        }
      ],
      "description": "User authentication endpoints with enhanced security"
    },
    {
      "name": "üè∑Ô∏è Brand Management",
      "item": [
        {
          "name": "Get All Brands (Public)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has brands array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('brands');",
                  "    pm.expect(jsonData.data.brands).to.be.an('array');",
                  "});",
                  "",
                  "console.log('‚úÖ Brands retrieved successfully');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/brands",
              "host": ["{{baseUrl}}"],
              "path": ["brands"]
            },
            "description": "Get all brands - public endpoint, no authentication required"
          }
        },
        {
          "name": "Create Brand (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Brand created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.message).to.equal('Brand created successfully');",
                  "});",
                  "",
                  "// Save brand ID for other tests",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('brandId', response.data.brand._id);",
                  "    console.log('‚úÖ Brand created successfully');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Brand\",\n  \"description\": \"A test brand for demonstration\",\n  \"website\": \"https://testbrand.com\",\n  \"logo\": \"https://testbrand.com/logo.png\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/brands",
              "host": ["{{baseUrl}}"],
              "path": ["brands"]
            },
            "description": "Create a new brand - requires admin authentication"
          }
        },
        {
          "name": "Update Brand (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Brand updated successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.message).to.equal('Brand updated successfully');",
                  "});",
                  "",
                  "console.log('‚úÖ Brand updated successfully');"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Brand\",\n  \"description\": \"An updated test brand description\",\n  \"website\": \"https://updatedtestbrand.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/brands/{{brandId}}",
              "host": ["{{baseUrl}}"],
              "path": ["brands", "{{brandId}}"]
            },
            "description": "Update an existing brand - requires admin authentication"
          }
        },
        {
          "name": "Delete Brand (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Brand deleted successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.message).to.equal('Brand deleted successfully');",
                  "});",
                  "",
                  "console.log('‚úÖ Brand deleted successfully');"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/brands/{{brandId}}",
              "host": ["{{baseUrl}}"],
              "path": ["brands", "{{brandId}}"]
            },
            "description": "Delete a brand - requires admin authentication"
          }
        }
      ],
      "description": "Brand management endpoints for creating, reading, updating, and deleting brands"
    }
  ]
}
,
    {
      "name": "üì¶ Product Management",
      "item": [
        {
          "name": "Get All Products (Public)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has products array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('products');",
                  "    pm.expect(jsonData.data.products).to.be.an('array');",
                  "});",
                  "",
                  "console.log('‚úÖ Products retrieved successfully');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            },
            "description": "Get all products - public endpoint, no authentication required"
          }
        },
        {
          "name": "Get Products by Brand (Public)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has products and pagination', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('products');",
                  "    pm.expect(jsonData.data).to.have.property('pagination');",
                  "});",
                  "",
                  "console.log('‚úÖ Products by brand retrieved successfully');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/TestBrand/1/10",
              "host": ["{{baseUrl}}"],
              "path": ["products", "TestBrand", "1", "10"]
            },
            "description": "Get products by brand with pagination - public endpoint"
          }
        },
        {
          "name": "Create Product (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Product created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.message).to.equal('Product created successfully');",
                  "});",
                  "",
                  "// Save product ID for other tests",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('productId', response.data.product._id);",
                  "    console.log('‚úÖ Product created successfully');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Product\",\n  \"description\": \"A test product for demonstration\",\n  \"price\": 25.99,\n  \"brand\": \"TestBrand\",\n  \"category\": \"Electronics\",\n  \"stock\": 100,\n  \"images\": [\"https://example.com/image1.jpg\"],\n  \"specifications\": {\n    \"color\": \"Black\",\n    \"weight\": \"1kg\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            },
            "description": "Create a new product - requires admin authentication"
          }
        },
        {
          "name": "Delete Product (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Product deleted successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.message).to.equal('Product deleted successfully');",
                  "});",
                  "",
                  "console.log('‚úÖ Product deleted successfully');"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{productId}}"]
            },
            "description": "Delete a product - requires admin authentication"
          }
        }
      ],
      "description": "Product management endpoints for creating, reading, and deleting products"
    },
    {
      "name": "üë§ User Profile",
      "item": [
        {
          "name": "Get Customer Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile retrieved successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.message).to.equal('Profile retrieved successfully');",
                  "});",
                  "",
                  "pm.test('Profile has required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const profile = jsonData.data;",
                  "    pm.expect(profile).to.have.property('_id');",
                  "    pm.expect(profile).to.have.property('fullName');",
                  "    pm.expect(profile).to.have.property('email');",
                  "    pm.expect(profile).to.have.property('role');",
                  "});",
                  "",
                  "pm.test('Profile does not include password', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.not.have.property('password');",
                  "});",
                  "",
                  "console.log('‚úÖ Customer profile retrieved successfully');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{customerToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/profile",
              "host": ["{{baseUrl}}"],
              "path": ["profile"]
            },
            "description": "Get customer profile - requires customer authentication"
          }
        },
        {
          "name": "Get Admin Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User role is admin', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.role).to.equal('admin');",
                  "});",
                  "",
                  "console.log('‚úÖ Admin profile retrieved successfully');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/profile",
              "host": ["{{baseUrl}}"],
              "path": ["profile"]
            },
            "description": "Get admin profile - requires admin authentication"
          }
        }
      ],
      "description": "User profile endpoints for customers and admins"
    },
    {
      "name": "üõí Order Management",
      "item": [
        {
          "name": "Create Order (Customer Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Order created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.message).to.equal('Order created successfully');",
                  "});",
                  "",
                  "pm.test('Order has required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const order = jsonData.data.order;",
                  "    pm.expect(order).to.have.property('_id');",
                  "    pm.expect(order).to.have.property('orderNumber');",
                  "    pm.expect(order).to.have.property('customerId');",
                  "    pm.expect(order).to.have.property('items');",
                  "    pm.expect(order).to.have.property('totalAmount');",
                  "    pm.expect(order).to.have.property('shippingStatus');",
                  "});",
                  "",
                  "// Save order ID for other tests",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('orderId', response.data.order._id);",
                  "    console.log('‚úÖ Order created successfully');",
                  "    console.log('üìã Order Number:', response.data.order.orderNumber);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{customerToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [\n    {\n      \"productName\": \"Test Product\",\n      \"productId\": \"{{productId}}\",\n      \"ownerId\": \"{{adminId}}\",\n      \"quantity\": 2,\n      \"totalCost\": 51.98\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": ["{{baseUrl}}"],
              "path": ["orders"]
            },
            "description": "Create a new order - requires customer authentication"
          }
        },
        {
          "name": "Get All Orders (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Orders retrieved successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.message).to.equal('Orders retrieved successfully');",
                  "});",
                  "",
                  "pm.test('Response has orders array and pagination', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('orders');",
                  "    pm.expect(jsonData.data.orders).to.be.an('array');",
                  "    pm.expect(jsonData.data).to.have.property('pagination');",
                  "});",
                  "",
                  "console.log('‚úÖ Orders retrieved successfully');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/orders?page=1&limit=10&sortBy=createdAt&sortOrder=desc",
              "host": ["{{baseUrl}}"],
              "path": ["orders"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of orders per page"
                },
                {
                  "key": "status",
                  "value": "pending",
                  "description": "Filter by shipping status",
                  "disabled": true
                },
                {
                  "key": "sortBy",
                  "value": "createdAt",
                  "description": "Sort field"
                },
                {
                  "key": "sortOrder",
                  "value": "desc",
                  "description": "Sort order (asc/desc)"
                }
              ]
            },
            "description": "Get all orders with pagination and filtering - requires admin authentication"
          }
        },
        {
          "name": "Get Order by ID (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Order retrieved successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.message).to.equal('Order retrieved successfully');",
                  "});",
                  "",
                  "console.log('‚úÖ Order details retrieved successfully');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}"]
            },
            "description": "Get specific order by ID - requires admin authentication"
          }
        },
        {
          "name": "Update Order Status to Shipped (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Order status updated successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.message).to.equal('Order status updated successfully');",
                  "});",
                  "",
                  "pm.test('Order has updated status', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.order.shippingStatus).to.equal('shipped');",
                  "});",
                  "",
                  "console.log('‚úÖ Order status updated to shipped');"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shippingStatus\": \"shipped\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}", "status"]
            },
            "description": "Update order shipping status - requires admin authentication"
          }
        },
        {
          "name": "Update Order Status to Delivered (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Order status updated to delivered', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.order.shippingStatus).to.equal('delivered');",
                  "});",
                  "",
                  "console.log('‚úÖ Order status updated to delivered');"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shippingStatus\": \"delivered\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}", "status"]
            },
            "description": "Update order status to delivered - final status in the order lifecycle"
          }
        }
      ],
      "description": "Order management endpoints for creating, viewing, and updating orders"
    },
    {
      "name": "üìã Order History",
      "item": [
        {
          "name": "Get Customer Order History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Order history retrieved successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.message).to.equal('Order history retrieved successfully');",
                  "});",
                  "",
                  "pm.test('Response has orders array and pagination', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('orders');",
                  "    pm.expect(jsonData.data.orders).to.be.an('array');",
                  "    pm.expect(jsonData.data).to.have.property('pagination');",
                  "});",
                  "",
                  "console.log('‚úÖ Customer order history retrieved successfully');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{customerToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/order-history?page=1&limit=10&status=all&sortBy=createdAt&sortOrder=desc",
              "host": ["{{baseUrl}}"],
              "path": ["order-history"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of orders per page"
                },
                {
                  "key": "status",
                  "value": "all",
                  "description": "Filter by status: all, pending, shipped, delivered"
                },
                {
                  "key": "sortBy",
                  "value": "createdAt",
                  "description": "Sort field: createdAt, totalAmount, shippingStatus"
                },
                {
                  "key": "sortOrder",
                  "value": "desc",
                  "description": "Sort order: asc or desc"
                }
              ]
            },
            "description": "Get customer's order history with filtering and pagination - requires customer authentication"
          }
        },
        {
          "name": "Get Order History - Filter by Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Filtered orders retrieved', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Orders match filter status', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const orders = jsonData.data.orders;",
                  "    if (orders.length > 0) {",
                  "        orders.forEach(order => {",
                  "            pm.expect(order.shippingStatus).to.equal('pending');",
                  "        });",
                  "    }",
                  "});",
                  "",
                  "console.log('‚úÖ Filtered order history retrieved successfully');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{customerToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/order-history?status=pending&sortBy=createdAt&sortOrder=desc",
              "host": ["{{baseUrl}}"],
              "path": ["order-history"],
              "query": [
                {
                  "key": "status",
                  "value": "pending",
                  "description": "Filter by pending orders only"
                },
                {
                  "key": "sortBy",
                  "value": "createdAt",
                  "description": "Sort by creation date"
                },
                {
                  "key": "sortOrder",
                  "value": "desc",
                  "description": "Newest first"
                }
              ]
            },
            "description": "Get customer's pending orders only - demonstrates status filtering"
          }
        },
        {
          "name": "Get Order History - Sort by Amount",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Orders sorted by amount', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const orders = jsonData.data.orders;",
                  "    if (orders.length > 1) {",
                  "        for (let i = 0; i < orders.length - 1; i++) {",
                  "            pm.expect(orders[i].totalAmount).to.be.at.least(orders[i + 1].totalAmount);",
                  "        }",
                  "    }",
                  "});",
                  "",
                  "console.log('‚úÖ Orders sorted by amount successfully');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{customerToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/order-history?sortBy=totalAmount&sortOrder=desc",
              "host": ["{{baseUrl}}"],
              "path": ["order-history"],
              "query": [
                {
                  "key": "sortBy",
                  "value": "totalAmount",
                  "description": "Sort by order total amount"
                },
                {
                  "key": "sortOrder",
                  "value": "desc",
                  "description": "Highest amount first"
                }
              ]
            },
            "description": "Get customer's orders sorted by total amount - demonstrates sorting functionality"
          }
        }
      ],
      "description": "Order history endpoints for customers to view their past orders with filtering and sorting"
    },
    {
      "name": "üîí Security Tests",
      "item": [
        {
          "name": "Unauthorized Profile Access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Unauthorized access blocked', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "console.log('‚úÖ Unauthorized access properly blocked');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/profile",
              "host": ["{{baseUrl}}"],
              "path": ["profile"]
            },
            "description": "Test unauthorized access to profile endpoint"
          }
        },
        {
          "name": "Customer Accessing Admin Orders",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 403', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Access denied for customer', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('Access denied');",
                  "});",
                  "",
                  "console.log('‚úÖ Customer properly denied admin access');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{customerToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": ["{{baseUrl}}"],
              "path": ["orders"]
            },
            "description": "Test customer trying to access admin-only orders endpoint"
          }
        },
        {
          "name": "Invalid JWT Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Invalid token rejected', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "console.log('‚úÖ Invalid JWT token properly rejected');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid.jwt.token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/profile",
              "host": ["{{baseUrl}}"],
              "path": ["profile"]
            },
            "description": "Test invalid JWT token handling"
          }
        }
      ],
      "description": "Security test endpoints to verify authentication and authorization"
    },
    {
      "name": "üß™ Test Workflows",
      "item": [
        {
          "name": "Complete Order Workflow",
          "item": [
            {
              "name": "1. Register Users",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"fullName\": \"Workflow Admin\",\n  \"email\": \"workflow-admin@example.com\",\n  \"password\": \"adminpass123\",\n  \"role\": \"admin\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/register",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "register"]
                }
              }
            },
            {
              "name": "2. Create Brand",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{adminToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Workflow Brand\",\n  \"description\": \"Brand for workflow testing\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/brands",
                  "host": ["{{baseUrl}}"],
                  "path": ["brands"]
                }
              }
            },
            {
              "name": "3. Create Product",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{adminToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Workflow Product\",\n  \"description\": \"Product for workflow testing\",\n  \"price\": 29.99,\n  \"brand\": \"Workflow Brand\",\n  \"category\": \"Test\",\n  \"stock\": 50\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/products",
                  "host": ["{{baseUrl}}"],
                  "path": ["products"]
                }
              }
            },
            {
              "name": "4. Register Customer",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"fullName\": \"Workflow Customer\",\n  \"email\": \"workflow-customer@example.com\",\n  \"password\": \"password123\",\n  \"role\": \"customer\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/register",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "register"]
                }
              }
            },
            {
              "name": "5. Create Order",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{customerToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [\n    {\n      \"productName\": \"Workflow Product\",\n      \"productId\": \"{{productId}}\",\n      \"ownerId\": \"{{adminId}}\",\n      \"quantity\": 1,\n      \"totalCost\": 29.99\n    }\n  ]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/orders",
                  "host": ["{{baseUrl}}"],
                  "path": ["orders"]
                }
              }
            },
            {
              "name": "6. Update Order to Shipped",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{adminToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"shippingStatus\": \"shipped\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/orders/{{orderId}}/status",
                  "host": ["{{baseUrl}}"],
                  "path": ["orders", "{{orderId}}", "status"]
                }
              }
            },
            {
              "name": "7. Check Order History",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{customerToken}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/order-history",
                  "host": ["{{baseUrl}}"],
                  "path": ["order-history"]
                }
              }
            }
          ],
          "description": "Complete workflow from user registration to order completion"
        }
      ],
      "description": "End-to-end test workflows demonstrating complete feature functionality"
    }
  ]
}